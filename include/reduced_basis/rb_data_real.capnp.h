// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rb_data_real.capnp

#ifndef CAPNP_INCLUDED_ffc2b6c54145b6c4_
#define CAPNP_INCLUDED_ffc2b6c54145b6c4_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(da65bfa81ea2ce0b);
CAPNP_DECLARE_SCHEMA(b73e071e0a405648);
CAPNP_DECLARE_SCHEMA(eccae95c5c74616e);
CAPNP_DECLARE_SCHEMA(c7c5f4dfa33dfb27);
CAPNP_DECLARE_SCHEMA(eb6a19346114773a);
CAPNP_DECLARE_SCHEMA(a459b0816a4ad3e3);
CAPNP_DECLARE_SCHEMA(f0ee71757fa42963);
CAPNP_DECLARE_SCHEMA(de7dfcf8ecccaa90);
CAPNP_DECLARE_SCHEMA(cd01b7bd6045605d);
CAPNP_DECLARE_SCHEMA(f8121d2237427a80);
CAPNP_DECLARE_SCHEMA(b8dd038628a64b16);

}  // namespace schemas
}  // namespace capnp

namespace RBData {

struct Complex {
  Complex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da65bfa81ea2ce0b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RBParameter {
  RBParameter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b73e071e0a405648, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ParameterRanges {
  ParameterRanges() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eccae95c5c74616e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscreteParameterList {
  DiscreteParameterList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7c5f4dfa33dfb27, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Output {
  Output() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb6a19346114773a, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RBEvaluation {
  RBEvaluation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a459b0816a4ad3e3, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TransientRBEvaluation {
  TransientRBEvaluation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0ee71757fa42963, 3, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Point3D {
  Point3D() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de7dfcf8ecccaa90, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MeshElem {
  MeshElem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd01b7bd6045605d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RBEIMEvaluation {
  RBEIMEvaluation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8121d2237427a80, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RBSCMEvaluation {
  RBSCMEvaluation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8dd038628a64b16, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Complex::Reader {
public:
  typedef Complex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline double getReal() const;

  inline double getImag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Complex::Builder {
public:
  typedef Complex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getReal();
  inline void setReal(double value);

  inline double getImag();
  inline void setImag(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Complex::Pipeline {
public:
  typedef Complex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RBParameter::Reader {
public:
  typedef RBParameter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline double getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RBParameter::Builder {
public:
  typedef RBParameter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline double getValue();
  inline void setValue(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RBParameter::Pipeline {
public:
  typedef RBParameter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParameterRanges::Reader {
public:
  typedef ParameterRanges Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getName() const;

  inline bool hasMinValue() const;
  inline  ::capnp::List<double>::Reader getMinValue() const;

  inline bool hasMaxValue() const;
  inline  ::capnp::List<double>::Reader getMaxValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParameterRanges::Builder {
public:
  typedef ParameterRanges Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::List< ::capnp::Text>::Builder getName();
  inline void setName( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownName();

  inline bool hasMinValue();
  inline  ::capnp::List<double>::Builder getMinValue();
  inline void setMinValue( ::capnp::List<double>::Reader value);
  inline void setMinValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initMinValue(unsigned int size);
  inline void adoptMinValue(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownMinValue();

  inline bool hasMaxValue();
  inline  ::capnp::List<double>::Builder getMaxValue();
  inline void setMaxValue( ::capnp::List<double>::Reader value);
  inline void setMaxValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initMaxValue(unsigned int size);
  inline void adoptMaxValue(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownMaxValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParameterRanges::Pipeline {
public:
  typedef ParameterRanges Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscreteParameterList::Reader {
public:
  typedef DiscreteParameterList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getName() const;

  inline bool hasValues() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getValues() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscreteParameterList::Builder {
public:
  typedef DiscreteParameterList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::List< ::capnp::Text>::Builder getName();
  inline void setName( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownName();

  inline bool hasValues();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getValues();
  inline void setValues( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setValues(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initValues(unsigned int size);
  inline void adoptValues(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownValues();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscreteParameterList::Pipeline {
public:
  typedef DiscreteParameterList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Output::Reader {
public:
  typedef Output Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasOutputDualInnerprods() const;
  inline  ::capnp::List<double>::Reader getOutputDualInnerprods() const;

  inline bool hasOutputVectors() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getOutputVectors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Output::Builder {
public:
  typedef Output Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOutputDualInnerprods();
  inline  ::capnp::List<double>::Builder getOutputDualInnerprods();
  inline void setOutputDualInnerprods( ::capnp::List<double>::Reader value);
  inline void setOutputDualInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initOutputDualInnerprods(unsigned int size);
  inline void adoptOutputDualInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownOutputDualInnerprods();

  inline bool hasOutputVectors();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getOutputVectors();
  inline void setOutputVectors( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setOutputVectors(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initOutputVectors(unsigned int size);
  inline void adoptOutputVectors(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownOutputVectors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Output::Pipeline {
public:
  typedef Output Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RBEvaluation::Reader {
public:
  typedef RBEvaluation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNBfs() const;

  inline bool hasParameterRanges() const;
  inline  ::RBData::ParameterRanges::Reader getParameterRanges() const;

  inline bool hasDiscreteParameters() const;
  inline  ::RBData::DiscreteParameterList::Reader getDiscreteParameters() const;

  inline bool hasAqAqInnerprods() const;
  inline  ::capnp::List<double>::Reader getAqAqInnerprods() const;

  inline bool hasFqAqInnerprods() const;
  inline  ::capnp::List<double>::Reader getFqAqInnerprods() const;

  inline bool hasFqInnerprods() const;
  inline  ::capnp::List<double>::Reader getFqInnerprods() const;

  inline bool hasRbFqVectors() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getRbFqVectors() const;

  inline bool hasRbAqMatrices() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getRbAqMatrices() const;

  inline bool hasOutputs() const;
  inline  ::capnp::List< ::RBData::Output>::Reader getOutputs() const;

  inline bool hasRbInnerProductMatrix() const;
  inline  ::capnp::List<double>::Reader getRbInnerProductMatrix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RBEvaluation::Builder {
public:
  typedef RBEvaluation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNBfs();
  inline void setNBfs( ::uint32_t value);

  inline bool hasParameterRanges();
  inline  ::RBData::ParameterRanges::Builder getParameterRanges();
  inline void setParameterRanges( ::RBData::ParameterRanges::Reader value);
  inline  ::RBData::ParameterRanges::Builder initParameterRanges();
  inline void adoptParameterRanges(::capnp::Orphan< ::RBData::ParameterRanges>&& value);
  inline ::capnp::Orphan< ::RBData::ParameterRanges> disownParameterRanges();

  inline bool hasDiscreteParameters();
  inline  ::RBData::DiscreteParameterList::Builder getDiscreteParameters();
  inline void setDiscreteParameters( ::RBData::DiscreteParameterList::Reader value);
  inline  ::RBData::DiscreteParameterList::Builder initDiscreteParameters();
  inline void adoptDiscreteParameters(::capnp::Orphan< ::RBData::DiscreteParameterList>&& value);
  inline ::capnp::Orphan< ::RBData::DiscreteParameterList> disownDiscreteParameters();

  inline bool hasAqAqInnerprods();
  inline  ::capnp::List<double>::Builder getAqAqInnerprods();
  inline void setAqAqInnerprods( ::capnp::List<double>::Reader value);
  inline void setAqAqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initAqAqInnerprods(unsigned int size);
  inline void adoptAqAqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownAqAqInnerprods();

  inline bool hasFqAqInnerprods();
  inline  ::capnp::List<double>::Builder getFqAqInnerprods();
  inline void setFqAqInnerprods( ::capnp::List<double>::Reader value);
  inline void setFqAqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initFqAqInnerprods(unsigned int size);
  inline void adoptFqAqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFqAqInnerprods();

  inline bool hasFqInnerprods();
  inline  ::capnp::List<double>::Builder getFqInnerprods();
  inline void setFqInnerprods( ::capnp::List<double>::Reader value);
  inline void setFqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initFqInnerprods(unsigned int size);
  inline void adoptFqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFqInnerprods();

  inline bool hasRbFqVectors();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getRbFqVectors();
  inline void setRbFqVectors( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setRbFqVectors(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initRbFqVectors(unsigned int size);
  inline void adoptRbFqVectors(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownRbFqVectors();

  inline bool hasRbAqMatrices();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getRbAqMatrices();
  inline void setRbAqMatrices( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setRbAqMatrices(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initRbAqMatrices(unsigned int size);
  inline void adoptRbAqMatrices(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownRbAqMatrices();

  inline bool hasOutputs();
  inline  ::capnp::List< ::RBData::Output>::Builder getOutputs();
  inline void setOutputs( ::capnp::List< ::RBData::Output>::Reader value);
  inline  ::capnp::List< ::RBData::Output>::Builder initOutputs(unsigned int size);
  inline void adoptOutputs(::capnp::Orphan< ::capnp::List< ::RBData::Output>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RBData::Output>> disownOutputs();

  inline bool hasRbInnerProductMatrix();
  inline  ::capnp::List<double>::Builder getRbInnerProductMatrix();
  inline void setRbInnerProductMatrix( ::capnp::List<double>::Reader value);
  inline void setRbInnerProductMatrix(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initRbInnerProductMatrix(unsigned int size);
  inline void adoptRbInnerProductMatrix(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownRbInnerProductMatrix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RBEvaluation::Pipeline {
public:
  typedef RBEvaluation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RBData::ParameterRanges::Pipeline getParameterRanges();
  inline  ::RBData::DiscreteParameterList::Pipeline getDiscreteParameters();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransientRBEvaluation::Reader {
public:
  typedef TransientRBEvaluation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRbEvaluation() const;
  inline  ::RBData::RBEvaluation::Reader getRbEvaluation() const;

  inline double getDeltaT() const;

  inline double getEulerTheta() const;

  inline  ::uint32_t getNTimeSteps() const;

  inline  ::uint32_t getTimeStep() const;

  inline bool hasRbL2Matrix() const;
  inline  ::capnp::List<double>::Reader getRbL2Matrix() const;

  inline bool hasRbMqMatrices() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getRbMqMatrices() const;

  inline bool hasInitialL2Errors() const;
  inline  ::capnp::List<double>::Reader getInitialL2Errors() const;

  inline bool hasInitialConditions() const;
  inline  ::capnp::List< ::capnp::List<double>>::Reader getInitialConditions() const;

  inline bool hasFqMqInnerprods() const;
  inline  ::capnp::List<double>::Reader getFqMqInnerprods() const;

  inline bool hasMqMqInnerprods() const;
  inline  ::capnp::List<double>::Reader getMqMqInnerprods() const;

  inline bool hasAqMqInnerprods() const;
  inline  ::capnp::List<double>::Reader getAqMqInnerprods() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransientRBEvaluation::Builder {
public:
  typedef TransientRBEvaluation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRbEvaluation();
  inline  ::RBData::RBEvaluation::Builder getRbEvaluation();
  inline void setRbEvaluation( ::RBData::RBEvaluation::Reader value);
  inline  ::RBData::RBEvaluation::Builder initRbEvaluation();
  inline void adoptRbEvaluation(::capnp::Orphan< ::RBData::RBEvaluation>&& value);
  inline ::capnp::Orphan< ::RBData::RBEvaluation> disownRbEvaluation();

  inline double getDeltaT();
  inline void setDeltaT(double value);

  inline double getEulerTheta();
  inline void setEulerTheta(double value);

  inline  ::uint32_t getNTimeSteps();
  inline void setNTimeSteps( ::uint32_t value);

  inline  ::uint32_t getTimeStep();
  inline void setTimeStep( ::uint32_t value);

  inline bool hasRbL2Matrix();
  inline  ::capnp::List<double>::Builder getRbL2Matrix();
  inline void setRbL2Matrix( ::capnp::List<double>::Reader value);
  inline void setRbL2Matrix(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initRbL2Matrix(unsigned int size);
  inline void adoptRbL2Matrix(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownRbL2Matrix();

  inline bool hasRbMqMatrices();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getRbMqMatrices();
  inline void setRbMqMatrices( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setRbMqMatrices(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initRbMqMatrices(unsigned int size);
  inline void adoptRbMqMatrices(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownRbMqMatrices();

  inline bool hasInitialL2Errors();
  inline  ::capnp::List<double>::Builder getInitialL2Errors();
  inline void setInitialL2Errors( ::capnp::List<double>::Reader value);
  inline void setInitialL2Errors(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initInitialL2Errors(unsigned int size);
  inline void adoptInitialL2Errors(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownInitialL2Errors();

  inline bool hasInitialConditions();
  inline  ::capnp::List< ::capnp::List<double>>::Builder getInitialConditions();
  inline void setInitialConditions( ::capnp::List< ::capnp::List<double>>::Reader value);
  inline void setInitialConditions(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double>>::Builder initInitialConditions(unsigned int size);
  inline void adoptInitialConditions(::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> disownInitialConditions();

  inline bool hasFqMqInnerprods();
  inline  ::capnp::List<double>::Builder getFqMqInnerprods();
  inline void setFqMqInnerprods( ::capnp::List<double>::Reader value);
  inline void setFqMqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initFqMqInnerprods(unsigned int size);
  inline void adoptFqMqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFqMqInnerprods();

  inline bool hasMqMqInnerprods();
  inline  ::capnp::List<double>::Builder getMqMqInnerprods();
  inline void setMqMqInnerprods( ::capnp::List<double>::Reader value);
  inline void setMqMqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initMqMqInnerprods(unsigned int size);
  inline void adoptMqMqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownMqMqInnerprods();

  inline bool hasAqMqInnerprods();
  inline  ::capnp::List<double>::Builder getAqMqInnerprods();
  inline void setAqMqInnerprods( ::capnp::List<double>::Reader value);
  inline void setAqMqInnerprods(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initAqMqInnerprods(unsigned int size);
  inline void adoptAqMqInnerprods(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownAqMqInnerprods();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransientRBEvaluation::Pipeline {
public:
  typedef TransientRBEvaluation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RBData::RBEvaluation::Pipeline getRbEvaluation();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point3D::Reader {
public:
  typedef Point3D Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3D::Builder {
public:
  typedef Point3D Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3D::Pipeline {
public:
  typedef Point3D Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MeshElem::Reader {
public:
  typedef MeshElem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::RBData::Point3D>::Reader getPoints() const;

  inline  ::uint32_t getSubdomainId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MeshElem::Builder {
public:
  typedef MeshElem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasPoints();
  inline  ::capnp::List< ::RBData::Point3D>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::RBData::Point3D>::Reader value);
  inline  ::capnp::List< ::RBData::Point3D>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::RBData::Point3D>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>> disownPoints();

  inline  ::uint32_t getSubdomainId();
  inline void setSubdomainId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MeshElem::Pipeline {
public:
  typedef MeshElem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RBEIMEvaluation::Reader {
public:
  typedef RBEIMEvaluation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRbEvaluation() const;
  inline  ::RBData::RBEvaluation::Reader getRbEvaluation() const;

  inline bool hasInterpolationElemIds() const;
  inline  ::capnp::List< ::uint32_t>::Reader getInterpolationElemIds() const;

  inline bool hasInterpolationMatrix() const;
  inline  ::capnp::List<double>::Reader getInterpolationMatrix() const;

  inline bool hasInterpolationPointsElems() const;
  inline  ::capnp::List< ::RBData::MeshElem>::Reader getInterpolationPointsElems() const;

  inline bool hasInterpolationPointsVar() const;
  inline  ::capnp::List< ::uint32_t>::Reader getInterpolationPointsVar() const;

  inline bool hasInterpolationPoints() const;
  inline  ::capnp::List< ::RBData::Point3D>::Reader getInterpolationPoints() const;

  inline bool hasExtraInterpolationMatrixRow() const;
  inline  ::capnp::List<double>::Reader getExtraInterpolationMatrixRow() const;

  inline bool hasExtraInterpolationPointElem() const;
  inline  ::RBData::MeshElem::Reader getExtraInterpolationPointElem() const;

  inline  ::uint32_t getExtraInterpolationPointVar() const;

  inline bool hasExtraInterpolationPoint() const;
  inline  ::RBData::Point3D::Reader getExtraInterpolationPoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RBEIMEvaluation::Builder {
public:
  typedef RBEIMEvaluation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRbEvaluation();
  inline  ::RBData::RBEvaluation::Builder getRbEvaluation();
  inline void setRbEvaluation( ::RBData::RBEvaluation::Reader value);
  inline  ::RBData::RBEvaluation::Builder initRbEvaluation();
  inline void adoptRbEvaluation(::capnp::Orphan< ::RBData::RBEvaluation>&& value);
  inline ::capnp::Orphan< ::RBData::RBEvaluation> disownRbEvaluation();

  inline bool hasInterpolationElemIds();
  inline  ::capnp::List< ::uint32_t>::Builder getInterpolationElemIds();
  inline void setInterpolationElemIds( ::capnp::List< ::uint32_t>::Reader value);
  inline void setInterpolationElemIds(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initInterpolationElemIds(unsigned int size);
  inline void adoptInterpolationElemIds(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownInterpolationElemIds();

  inline bool hasInterpolationMatrix();
  inline  ::capnp::List<double>::Builder getInterpolationMatrix();
  inline void setInterpolationMatrix( ::capnp::List<double>::Reader value);
  inline void setInterpolationMatrix(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initInterpolationMatrix(unsigned int size);
  inline void adoptInterpolationMatrix(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownInterpolationMatrix();

  inline bool hasInterpolationPointsElems();
  inline  ::capnp::List< ::RBData::MeshElem>::Builder getInterpolationPointsElems();
  inline void setInterpolationPointsElems( ::capnp::List< ::RBData::MeshElem>::Reader value);
  inline  ::capnp::List< ::RBData::MeshElem>::Builder initInterpolationPointsElems(unsigned int size);
  inline void adoptInterpolationPointsElems(::capnp::Orphan< ::capnp::List< ::RBData::MeshElem>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RBData::MeshElem>> disownInterpolationPointsElems();

  inline bool hasInterpolationPointsVar();
  inline  ::capnp::List< ::uint32_t>::Builder getInterpolationPointsVar();
  inline void setInterpolationPointsVar( ::capnp::List< ::uint32_t>::Reader value);
  inline void setInterpolationPointsVar(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initInterpolationPointsVar(unsigned int size);
  inline void adoptInterpolationPointsVar(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownInterpolationPointsVar();

  inline bool hasInterpolationPoints();
  inline  ::capnp::List< ::RBData::Point3D>::Builder getInterpolationPoints();
  inline void setInterpolationPoints( ::capnp::List< ::RBData::Point3D>::Reader value);
  inline  ::capnp::List< ::RBData::Point3D>::Builder initInterpolationPoints(unsigned int size);
  inline void adoptInterpolationPoints(::capnp::Orphan< ::capnp::List< ::RBData::Point3D>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>> disownInterpolationPoints();

  inline bool hasExtraInterpolationMatrixRow();
  inline  ::capnp::List<double>::Builder getExtraInterpolationMatrixRow();
  inline void setExtraInterpolationMatrixRow( ::capnp::List<double>::Reader value);
  inline void setExtraInterpolationMatrixRow(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initExtraInterpolationMatrixRow(unsigned int size);
  inline void adoptExtraInterpolationMatrixRow(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownExtraInterpolationMatrixRow();

  inline bool hasExtraInterpolationPointElem();
  inline  ::RBData::MeshElem::Builder getExtraInterpolationPointElem();
  inline void setExtraInterpolationPointElem( ::RBData::MeshElem::Reader value);
  inline  ::RBData::MeshElem::Builder initExtraInterpolationPointElem();
  inline void adoptExtraInterpolationPointElem(::capnp::Orphan< ::RBData::MeshElem>&& value);
  inline ::capnp::Orphan< ::RBData::MeshElem> disownExtraInterpolationPointElem();

  inline  ::uint32_t getExtraInterpolationPointVar();
  inline void setExtraInterpolationPointVar( ::uint32_t value);

  inline bool hasExtraInterpolationPoint();
  inline  ::RBData::Point3D::Builder getExtraInterpolationPoint();
  inline void setExtraInterpolationPoint( ::RBData::Point3D::Reader value);
  inline  ::RBData::Point3D::Builder initExtraInterpolationPoint();
  inline void adoptExtraInterpolationPoint(::capnp::Orphan< ::RBData::Point3D>&& value);
  inline ::capnp::Orphan< ::RBData::Point3D> disownExtraInterpolationPoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RBEIMEvaluation::Pipeline {
public:
  typedef RBEIMEvaluation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RBData::RBEvaluation::Pipeline getRbEvaluation();
  inline  ::RBData::MeshElem::Pipeline getExtraInterpolationPointElem();
  inline  ::RBData::Point3D::Pipeline getExtraInterpolationPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RBSCMEvaluation::Reader {
public:
  typedef RBSCMEvaluation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasParameterRanges() const;
  inline  ::RBData::ParameterRanges::Reader getParameterRanges() const;

  inline bool hasDiscreteParameters() const;
  inline  ::RBData::DiscreteParameterList::Reader getDiscreteParameters() const;

  inline bool hasBMin() const;
  inline  ::capnp::List<double>::Reader getBMin() const;

  inline bool hasBMax() const;
  inline  ::capnp::List<double>::Reader getBMax() const;

  inline bool hasCJStabilityVector() const;
  inline  ::capnp::List<double>::Reader getCJStabilityVector() const;

  inline bool hasCJ() const;
  inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Reader getCJ() const;

  inline bool hasScmUbVectors() const;
  inline  ::capnp::List<double>::Reader getScmUbVectors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RBSCMEvaluation::Builder {
public:
  typedef RBSCMEvaluation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParameterRanges();
  inline  ::RBData::ParameterRanges::Builder getParameterRanges();
  inline void setParameterRanges( ::RBData::ParameterRanges::Reader value);
  inline  ::RBData::ParameterRanges::Builder initParameterRanges();
  inline void adoptParameterRanges(::capnp::Orphan< ::RBData::ParameterRanges>&& value);
  inline ::capnp::Orphan< ::RBData::ParameterRanges> disownParameterRanges();

  inline bool hasDiscreteParameters();
  inline  ::RBData::DiscreteParameterList::Builder getDiscreteParameters();
  inline void setDiscreteParameters( ::RBData::DiscreteParameterList::Reader value);
  inline  ::RBData::DiscreteParameterList::Builder initDiscreteParameters();
  inline void adoptDiscreteParameters(::capnp::Orphan< ::RBData::DiscreteParameterList>&& value);
  inline ::capnp::Orphan< ::RBData::DiscreteParameterList> disownDiscreteParameters();

  inline bool hasBMin();
  inline  ::capnp::List<double>::Builder getBMin();
  inline void setBMin( ::capnp::List<double>::Reader value);
  inline void setBMin(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initBMin(unsigned int size);
  inline void adoptBMin(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownBMin();

  inline bool hasBMax();
  inline  ::capnp::List<double>::Builder getBMax();
  inline void setBMax( ::capnp::List<double>::Reader value);
  inline void setBMax(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initBMax(unsigned int size);
  inline void adoptBMax(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownBMax();

  inline bool hasCJStabilityVector();
  inline  ::capnp::List<double>::Builder getCJStabilityVector();
  inline void setCJStabilityVector( ::capnp::List<double>::Reader value);
  inline void setCJStabilityVector(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initCJStabilityVector(unsigned int size);
  inline void adoptCJStabilityVector(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownCJStabilityVector();

  inline bool hasCJ();
  inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Builder getCJ();
  inline void setCJ( ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Reader value);
  inline void setCJ(::kj::ArrayPtr<const  ::capnp::List< ::RBData::RBParameter>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Builder initCJ(unsigned int size);
  inline void adoptCJ(::capnp::Orphan< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>> disownCJ();

  inline bool hasScmUbVectors();
  inline  ::capnp::List<double>::Builder getScmUbVectors();
  inline void setScmUbVectors( ::capnp::List<double>::Reader value);
  inline void setScmUbVectors(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initScmUbVectors(unsigned int size);
  inline void adoptScmUbVectors(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownScmUbVectors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RBSCMEvaluation::Pipeline {
public:
  typedef RBSCMEvaluation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RBData::ParameterRanges::Pipeline getParameterRanges();
  inline  ::RBData::DiscreteParameterList::Pipeline getDiscreteParameters();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double Complex::Reader::getReal() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double Complex::Builder::getReal() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void Complex::Builder::setReal(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline double Complex::Reader::getImag() const {
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double Complex::Builder::getImag() {
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void Complex::Builder::setImag(double value) {
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool RBParameter::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RBParameter::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RBParameter::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RBParameter::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RBParameter::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RBParameter::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RBParameter::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RBParameter::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline double RBParameter::Reader::getValue() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double RBParameter::Builder::getValue() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void RBParameter::Builder::setValue(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ParameterRanges::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ParameterRanges::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ParameterRanges::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ParameterRanges::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ParameterRanges::Builder::setName( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void ParameterRanges::Builder::setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ParameterRanges::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ParameterRanges::Builder::adoptName(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ParameterRanges::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ParameterRanges::Reader::hasMinValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ParameterRanges::Builder::hasMinValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader ParameterRanges::Reader::getMinValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder ParameterRanges::Builder::getMinValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ParameterRanges::Builder::setMinValue( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void ParameterRanges::Builder::setMinValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder ParameterRanges::Builder::initMinValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ParameterRanges::Builder::adoptMinValue(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> ParameterRanges::Builder::disownMinValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ParameterRanges::Reader::hasMaxValue() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ParameterRanges::Builder::hasMaxValue() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader ParameterRanges::Reader::getMaxValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder ParameterRanges::Builder::getMaxValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ParameterRanges::Builder::setMaxValue( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void ParameterRanges::Builder::setMaxValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder ParameterRanges::Builder::initMaxValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ParameterRanges::Builder::adoptMaxValue(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> ParameterRanges::Builder::disownMaxValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DiscreteParameterList::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscreteParameterList::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader DiscreteParameterList::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder DiscreteParameterList::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscreteParameterList::Builder::setName( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void DiscreteParameterList::Builder::setName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder DiscreteParameterList::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DiscreteParameterList::Builder::adoptName(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> DiscreteParameterList::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscreteParameterList::Reader::hasValues() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscreteParameterList::Builder::hasValues() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader DiscreteParameterList::Reader::getValues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder DiscreteParameterList::Builder::getValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscreteParameterList::Builder::setValues( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void DiscreteParameterList::Builder::setValues(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder DiscreteParameterList::Builder::initValues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DiscreteParameterList::Builder::adoptValues(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> DiscreteParameterList::Builder::disownValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Output::Reader::hasOutputDualInnerprods() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Output::Builder::hasOutputDualInnerprods() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader Output::Reader::getOutputDualInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder Output::Builder::getOutputDualInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Output::Builder::setOutputDualInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Output::Builder::setOutputDualInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder Output::Builder::initOutputDualInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Output::Builder::adoptOutputDualInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> Output::Builder::disownOutputDualInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Output::Reader::hasOutputVectors() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Output::Builder::hasOutputVectors() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader Output::Reader::getOutputVectors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder Output::Builder::getOutputVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Output::Builder::setOutputVectors( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Output::Builder::setOutputVectors(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder Output::Builder::initOutputVectors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Output::Builder::adoptOutputVectors(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> Output::Builder::disownOutputVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t RBEvaluation::Reader::getNBfs() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t RBEvaluation::Builder::getNBfs() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RBEvaluation::Builder::setNBfs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RBEvaluation::Reader::hasParameterRanges() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasParameterRanges() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::ParameterRanges::Reader RBEvaluation::Reader::getParameterRanges() const {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::RBData::ParameterRanges::Builder RBEvaluation::Builder::getParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::ParameterRanges::Pipeline RBEvaluation::Pipeline::getParameterRanges() {
  return  ::RBData::ParameterRanges::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RBEvaluation::Builder::setParameterRanges( ::RBData::ParameterRanges::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::RBData::ParameterRanges::Builder RBEvaluation::Builder::initParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::adoptParameterRanges(
    ::capnp::Orphan< ::RBData::ParameterRanges>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::ParameterRanges> RBEvaluation::Builder::disownParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasDiscreteParameters() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasDiscreteParameters() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::DiscreteParameterList::Reader RBEvaluation::Reader::getDiscreteParameters() const {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::RBData::DiscreteParameterList::Builder RBEvaluation::Builder::getDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::DiscreteParameterList::Pipeline RBEvaluation::Pipeline::getDiscreteParameters() {
  return  ::RBData::DiscreteParameterList::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RBEvaluation::Builder::setDiscreteParameters( ::RBData::DiscreteParameterList::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::RBData::DiscreteParameterList::Builder RBEvaluation::Builder::initDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::adoptDiscreteParameters(
    ::capnp::Orphan< ::RBData::DiscreteParameterList>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::DiscreteParameterList> RBEvaluation::Builder::disownDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasAqAqInnerprods() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasAqAqInnerprods() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEvaluation::Reader::getAqAqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::getAqAqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setAqAqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setAqAqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::initAqAqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptAqAqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEvaluation::Builder::disownAqAqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasFqAqInnerprods() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasFqAqInnerprods() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEvaluation::Reader::getFqAqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::getFqAqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setFqAqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setFqAqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::initFqAqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptFqAqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEvaluation::Builder::disownFqAqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasFqInnerprods() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasFqInnerprods() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEvaluation::Reader::getFqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::getFqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setFqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setFqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::initFqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptFqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEvaluation::Builder::disownFqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasRbFqVectors() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasRbFqVectors() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader RBEvaluation::Reader::getRbFqVectors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder RBEvaluation::Builder::getRbFqVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setRbFqVectors( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setRbFqVectors(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder RBEvaluation::Builder::initRbFqVectors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptRbFqVectors(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> RBEvaluation::Builder::disownRbFqVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasRbAqMatrices() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasRbAqMatrices() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader RBEvaluation::Reader::getRbAqMatrices() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder RBEvaluation::Builder::getRbAqMatrices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setRbAqMatrices( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setRbAqMatrices(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder RBEvaluation::Builder::initRbAqMatrices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptRbAqMatrices(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> RBEvaluation::Builder::disownRbAqMatrices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasOutputs() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasOutputs() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RBData::Output>::Reader RBEvaluation::Reader::getOutputs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RBData::Output>::Builder RBEvaluation::Builder::getOutputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setOutputs( ::capnp::List< ::RBData::Output>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RBData::Output>::Builder RBEvaluation::Builder::initOutputs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptOutputs(
    ::capnp::Orphan< ::capnp::List< ::RBData::Output>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RBData::Output>> RBEvaluation::Builder::disownOutputs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Output>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool RBEvaluation::Reader::hasRbInnerProductMatrix() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool RBEvaluation::Builder::hasRbInnerProductMatrix() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEvaluation::Reader::getRbInnerProductMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::getRbInnerProductMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void RBEvaluation::Builder::setRbInnerProductMatrix( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void RBEvaluation::Builder::setRbInnerProductMatrix(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEvaluation::Builder::initRbInnerProductMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void RBEvaluation::Builder::adoptRbInnerProductMatrix(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEvaluation::Builder::disownRbInnerProductMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasRbEvaluation() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasRbEvaluation() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::RBEvaluation::Reader TransientRBEvaluation::Reader::getRbEvaluation() const {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::RBData::RBEvaluation::Builder TransientRBEvaluation::Builder::getRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::RBEvaluation::Pipeline TransientRBEvaluation::Pipeline::getRbEvaluation() {
  return  ::RBData::RBEvaluation::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TransientRBEvaluation::Builder::setRbEvaluation( ::RBData::RBEvaluation::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::RBData::RBEvaluation::Builder TransientRBEvaluation::Builder::initRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::adoptRbEvaluation(
    ::capnp::Orphan< ::RBData::RBEvaluation>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::RBEvaluation> TransientRBEvaluation::Builder::disownRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline double TransientRBEvaluation::Reader::getDeltaT() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double TransientRBEvaluation::Builder::getDeltaT() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void TransientRBEvaluation::Builder::setDeltaT(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline double TransientRBEvaluation::Reader::getEulerTheta() const {
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double TransientRBEvaluation::Builder::getEulerTheta() {
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void TransientRBEvaluation::Builder::setEulerTheta(double value) {
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TransientRBEvaluation::Reader::getNTimeSteps() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TransientRBEvaluation::Builder::getNTimeSteps() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TransientRBEvaluation::Builder::setNTimeSteps( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TransientRBEvaluation::Reader::getTimeStep() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TransientRBEvaluation::Builder::getTimeStep() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TransientRBEvaluation::Builder::setTimeStep( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TransientRBEvaluation::Reader::hasRbL2Matrix() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasRbL2Matrix() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TransientRBEvaluation::Reader::getRbL2Matrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::getRbL2Matrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setRbL2Matrix( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setRbL2Matrix(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::initRbL2Matrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptRbL2Matrix(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TransientRBEvaluation::Builder::disownRbL2Matrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasRbMqMatrices() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasRbMqMatrices() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader TransientRBEvaluation::Reader::getRbMqMatrices() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder TransientRBEvaluation::Builder::getRbMqMatrices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setRbMqMatrices( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setRbMqMatrices(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder TransientRBEvaluation::Builder::initRbMqMatrices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptRbMqMatrices(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> TransientRBEvaluation::Builder::disownRbMqMatrices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasInitialL2Errors() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasInitialL2Errors() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TransientRBEvaluation::Reader::getInitialL2Errors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::getInitialL2Errors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setInitialL2Errors( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setInitialL2Errors(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::initInitialL2Errors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptInitialL2Errors(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TransientRBEvaluation::Builder::disownInitialL2Errors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasInitialConditions() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasInitialConditions() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double>>::Reader TransientRBEvaluation::Reader::getInitialConditions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double>>::Builder TransientRBEvaluation::Builder::getInitialConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setInitialConditions( ::capnp::List< ::capnp::List<double>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setInitialConditions(::kj::ArrayPtr<const  ::capnp::List<double>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double>>::Builder TransientRBEvaluation::Builder::initInitialConditions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptInitialConditions(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double>>> TransientRBEvaluation::Builder::disownInitialConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double>>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasFqMqInnerprods() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasFqMqInnerprods() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TransientRBEvaluation::Reader::getFqMqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::getFqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setFqMqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setFqMqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::initFqMqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptFqMqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TransientRBEvaluation::Builder::disownFqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasMqMqInnerprods() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasMqMqInnerprods() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TransientRBEvaluation::Reader::getMqMqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::getMqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setMqMqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setMqMqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::initMqMqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptMqMqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TransientRBEvaluation::Builder::disownMqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool TransientRBEvaluation::Reader::hasAqMqInnerprods() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool TransientRBEvaluation::Builder::hasAqMqInnerprods() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader TransientRBEvaluation::Reader::getAqMqInnerprods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::getAqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void TransientRBEvaluation::Builder::setAqMqInnerprods( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void TransientRBEvaluation::Builder::setAqMqInnerprods(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder TransientRBEvaluation::Builder::initAqMqInnerprods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void TransientRBEvaluation::Builder::adoptAqMqInnerprods(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TransientRBEvaluation::Builder::disownAqMqInnerprods() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline double Point3D::Reader::getX() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double Point3D::Builder::getX() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void Point3D::Builder::setX(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline double Point3D::Reader::getY() const {
  return _reader.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}

inline double Point3D::Builder::getY() {
  return _builder.getDataField<double>(
      1 * ::capnp::ELEMENTS);
}
inline void Point3D::Builder::setY(double value) {
  _builder.setDataField<double>(
      1 * ::capnp::ELEMENTS, value);
}

inline double Point3D::Reader::getZ() const {
  return _reader.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}

inline double Point3D::Builder::getZ() {
  return _builder.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}
inline void Point3D::Builder::setZ(double value) {
  _builder.setDataField<double>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool MeshElem::Reader::hasType() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MeshElem::Builder::hasType() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MeshElem::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MeshElem::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MeshElem::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MeshElem::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MeshElem::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MeshElem::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MeshElem::Reader::hasPoints() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MeshElem::Builder::hasPoints() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RBData::Point3D>::Reader MeshElem::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RBData::Point3D>::Builder MeshElem::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MeshElem::Builder::setPoints( ::capnp::List< ::RBData::Point3D>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RBData::Point3D>::Builder MeshElem::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MeshElem::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>> MeshElem::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t MeshElem::Reader::getSubdomainId() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MeshElem::Builder::getSubdomainId() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MeshElem::Builder::setSubdomainId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RBEIMEvaluation::Reader::hasRbEvaluation() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasRbEvaluation() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::RBEvaluation::Reader RBEIMEvaluation::Reader::getRbEvaluation() const {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::RBData::RBEvaluation::Builder RBEIMEvaluation::Builder::getRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::RBEvaluation::Pipeline RBEIMEvaluation::Pipeline::getRbEvaluation() {
  return  ::RBData::RBEvaluation::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RBEIMEvaluation::Builder::setRbEvaluation( ::RBData::RBEvaluation::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::RBData::RBEvaluation::Builder RBEIMEvaluation::Builder::initRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::adoptRbEvaluation(
    ::capnp::Orphan< ::RBData::RBEvaluation>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::RBEvaluation> RBEIMEvaluation::Builder::disownRbEvaluation() {
  return ::capnp::_::PointerHelpers< ::RBData::RBEvaluation>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasInterpolationElemIds() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasInterpolationElemIds() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader RBEIMEvaluation::Reader::getInterpolationElemIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder RBEIMEvaluation::Builder::getInterpolationElemIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setInterpolationElemIds( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void RBEIMEvaluation::Builder::setInterpolationElemIds(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder RBEIMEvaluation::Builder::initInterpolationElemIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptInterpolationElemIds(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> RBEIMEvaluation::Builder::disownInterpolationElemIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasInterpolationMatrix() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasInterpolationMatrix() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEIMEvaluation::Reader::getInterpolationMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEIMEvaluation::Builder::getInterpolationMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setInterpolationMatrix( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void RBEIMEvaluation::Builder::setInterpolationMatrix(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEIMEvaluation::Builder::initInterpolationMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptInterpolationMatrix(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEIMEvaluation::Builder::disownInterpolationMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasInterpolationPointsElems() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasInterpolationPointsElems() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RBData::MeshElem>::Reader RBEIMEvaluation::Reader::getInterpolationPointsElems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RBData::MeshElem>::Builder RBEIMEvaluation::Builder::getInterpolationPointsElems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setInterpolationPointsElems( ::capnp::List< ::RBData::MeshElem>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RBData::MeshElem>::Builder RBEIMEvaluation::Builder::initInterpolationPointsElems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptInterpolationPointsElems(
    ::capnp::Orphan< ::capnp::List< ::RBData::MeshElem>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RBData::MeshElem>> RBEIMEvaluation::Builder::disownInterpolationPointsElems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::MeshElem>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasInterpolationPointsVar() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasInterpolationPointsVar() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader RBEIMEvaluation::Reader::getInterpolationPointsVar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder RBEIMEvaluation::Builder::getInterpolationPointsVar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setInterpolationPointsVar( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void RBEIMEvaluation::Builder::setInterpolationPointsVar(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder RBEIMEvaluation::Builder::initInterpolationPointsVar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptInterpolationPointsVar(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> RBEIMEvaluation::Builder::disownInterpolationPointsVar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasInterpolationPoints() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasInterpolationPoints() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RBData::Point3D>::Reader RBEIMEvaluation::Reader::getInterpolationPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RBData::Point3D>::Builder RBEIMEvaluation::Builder::getInterpolationPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setInterpolationPoints( ::capnp::List< ::RBData::Point3D>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RBData::Point3D>::Builder RBEIMEvaluation::Builder::initInterpolationPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptInterpolationPoints(
    ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RBData::Point3D>> RBEIMEvaluation::Builder::disownInterpolationPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RBData::Point3D>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasExtraInterpolationMatrixRow() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasExtraInterpolationMatrixRow() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBEIMEvaluation::Reader::getExtraInterpolationMatrixRow() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBEIMEvaluation::Builder::getExtraInterpolationMatrixRow() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::setExtraInterpolationMatrixRow( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void RBEIMEvaluation::Builder::setExtraInterpolationMatrixRow(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBEIMEvaluation::Builder::initExtraInterpolationMatrixRow(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void RBEIMEvaluation::Builder::adoptExtraInterpolationMatrixRow(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBEIMEvaluation::Builder::disownExtraInterpolationMatrixRow() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool RBEIMEvaluation::Reader::hasExtraInterpolationPointElem() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasExtraInterpolationPointElem() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::MeshElem::Reader RBEIMEvaluation::Reader::getExtraInterpolationPointElem() const {
  return ::capnp::_::PointerHelpers< ::RBData::MeshElem>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::RBData::MeshElem::Builder RBEIMEvaluation::Builder::getExtraInterpolationPointElem() {
  return ::capnp::_::PointerHelpers< ::RBData::MeshElem>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::MeshElem::Pipeline RBEIMEvaluation::Pipeline::getExtraInterpolationPointElem() {
  return  ::RBData::MeshElem::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void RBEIMEvaluation::Builder::setExtraInterpolationPointElem( ::RBData::MeshElem::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::MeshElem>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::RBData::MeshElem::Builder RBEIMEvaluation::Builder::initExtraInterpolationPointElem() {
  return ::capnp::_::PointerHelpers< ::RBData::MeshElem>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::adoptExtraInterpolationPointElem(
    ::capnp::Orphan< ::RBData::MeshElem>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::MeshElem>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::MeshElem> RBEIMEvaluation::Builder::disownExtraInterpolationPointElem() {
  return ::capnp::_::PointerHelpers< ::RBData::MeshElem>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline  ::uint32_t RBEIMEvaluation::Reader::getExtraInterpolationPointVar() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t RBEIMEvaluation::Builder::getExtraInterpolationPointVar() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RBEIMEvaluation::Builder::setExtraInterpolationPointVar( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RBEIMEvaluation::Reader::hasExtraInterpolationPoint() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool RBEIMEvaluation::Builder::hasExtraInterpolationPoint() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::Point3D::Reader RBEIMEvaluation::Reader::getExtraInterpolationPoint() const {
  return ::capnp::_::PointerHelpers< ::RBData::Point3D>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::RBData::Point3D::Builder RBEIMEvaluation::Builder::getExtraInterpolationPoint() {
  return ::capnp::_::PointerHelpers< ::RBData::Point3D>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::Point3D::Pipeline RBEIMEvaluation::Pipeline::getExtraInterpolationPoint() {
  return  ::RBData::Point3D::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void RBEIMEvaluation::Builder::setExtraInterpolationPoint( ::RBData::Point3D::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::Point3D>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::RBData::Point3D::Builder RBEIMEvaluation::Builder::initExtraInterpolationPoint() {
  return ::capnp::_::PointerHelpers< ::RBData::Point3D>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void RBEIMEvaluation::Builder::adoptExtraInterpolationPoint(
    ::capnp::Orphan< ::RBData::Point3D>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::Point3D>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::Point3D> RBEIMEvaluation::Builder::disownExtraInterpolationPoint() {
  return ::capnp::_::PointerHelpers< ::RBData::Point3D>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasParameterRanges() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasParameterRanges() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::ParameterRanges::Reader RBSCMEvaluation::Reader::getParameterRanges() const {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::RBData::ParameterRanges::Builder RBSCMEvaluation::Builder::getParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::ParameterRanges::Pipeline RBSCMEvaluation::Pipeline::getParameterRanges() {
  return  ::RBData::ParameterRanges::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RBSCMEvaluation::Builder::setParameterRanges( ::RBData::ParameterRanges::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::RBData::ParameterRanges::Builder RBSCMEvaluation::Builder::initParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::adoptParameterRanges(
    ::capnp::Orphan< ::RBData::ParameterRanges>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::ParameterRanges> RBSCMEvaluation::Builder::disownParameterRanges() {
  return ::capnp::_::PointerHelpers< ::RBData::ParameterRanges>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasDiscreteParameters() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasDiscreteParameters() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::RBData::DiscreteParameterList::Reader RBSCMEvaluation::Reader::getDiscreteParameters() const {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::RBData::DiscreteParameterList::Builder RBSCMEvaluation::Builder::getDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RBData::DiscreteParameterList::Pipeline RBSCMEvaluation::Pipeline::getDiscreteParameters() {
  return  ::RBData::DiscreteParameterList::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RBSCMEvaluation::Builder::setDiscreteParameters( ::RBData::DiscreteParameterList::Reader value) {
  ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::RBData::DiscreteParameterList::Builder RBSCMEvaluation::Builder::initDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::adoptDiscreteParameters(
    ::capnp::Orphan< ::RBData::DiscreteParameterList>&& value) {
  ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RBData::DiscreteParameterList> RBSCMEvaluation::Builder::disownDiscreteParameters() {
  return ::capnp::_::PointerHelpers< ::RBData::DiscreteParameterList>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasBMin() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasBMin() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBSCMEvaluation::Reader::getBMin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::getBMin() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::setBMin( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void RBSCMEvaluation::Builder::setBMin(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::initBMin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void RBSCMEvaluation::Builder::adoptBMin(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBSCMEvaluation::Builder::disownBMin() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasBMax() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasBMax() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBSCMEvaluation::Reader::getBMax() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::getBMax() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::setBMax( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void RBSCMEvaluation::Builder::setBMax(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::initBMax(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void RBSCMEvaluation::Builder::adoptBMax(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBSCMEvaluation::Builder::disownBMax() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasCJStabilityVector() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasCJStabilityVector() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBSCMEvaluation::Reader::getCJStabilityVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::getCJStabilityVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::setCJStabilityVector( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void RBSCMEvaluation::Builder::setCJStabilityVector(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::initCJStabilityVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void RBSCMEvaluation::Builder::adoptCJStabilityVector(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBSCMEvaluation::Builder::disownCJStabilityVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasCJ() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasCJ() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Reader RBSCMEvaluation::Reader::getCJ() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Builder RBSCMEvaluation::Builder::getCJ() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::setCJ( ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void RBSCMEvaluation::Builder::setCJ(::kj::ArrayPtr<const  ::capnp::List< ::RBData::RBParameter>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::RBData::RBParameter>>::Builder RBSCMEvaluation::Builder::initCJ(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void RBSCMEvaluation::Builder::adoptCJ(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>> RBSCMEvaluation::Builder::disownCJ() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::RBData::RBParameter>>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool RBSCMEvaluation::Reader::hasScmUbVectors() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool RBSCMEvaluation::Builder::hasScmUbVectors() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RBSCMEvaluation::Reader::getScmUbVectors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::getScmUbVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void RBSCMEvaluation::Builder::setScmUbVectors( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void RBSCMEvaluation::Builder::setScmUbVectors(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RBSCMEvaluation::Builder::initScmUbVectors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void RBSCMEvaluation::Builder::adoptScmUbVectors(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RBSCMEvaluation::Builder::disownScmUbVectors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_ffc2b6c54145b6c4_

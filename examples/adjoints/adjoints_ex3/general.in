# General FEMSystem related configuration options

# The timestep to start on (0 unless this is a restart)
initial_timestep = 0

# The number of timesteps to take
n_timesteps = 1

# Solve a transient instead of a steady problem?
transient = false

# The interval between our timesteps
deltat = 1e-2

# The tolerance to use with adaptive timestepping
# Make this 0 to use a constant deltat
timesolver_tolerance = 1.

# The theta to use (i.e. 0.5 = Crank-Nicholson, 1.0 = Backward Euler)
timesolver_theta = 1.0

# Solve a 2D or 3D problem?
#dimension = 3
dimension = 2

# Specify domain type (square or file)
domaintype = 'file'

# If domaintype = "file", specify file to read mesh from Be sure to set bcs accordingly
domainfile = 'H_channel_quads.xda'

# The type of element, should correspond to what 'file' specifies
elementtype = 'QUAD4'

# On what size domain?
domain_edge_width = 0.5
domain_edge_length = 5.0

# The coarse grid size from which to start adaptivity
coarsegridx = 1
coarsegridy = 1

# The number of uniform refinements to immediately perform on that grid
coarserefinements = 0

# The number of extra uniform refinements to perform after setting ICs
extrarefinements = 0

# Use Extra Quadrature orders ?
extra_quadrature_order = 1

# Should the nonlinear solver produce verbose messages?
solver_quiet = false

# Should the quasiNewton scheme do substepping?
require_residual_reduction = true

# How many iterations before the linear solver gives up?
max_linear_iterations = 10000

# How many iterations before the nonlinear solver gives up?
max_nonlinear_iterations = 10

# How much step size reduction should indicate convergence?
relative_step_tolerance = 1.e-5

# How much residual reduction should indicate convergence?
absolute_residual_tolerance = 1.e-5
relative_residual_tolerance = 1.e-5

# What should the largest relative linear tolerance be?
initial_linear_tolerance = 1.e-16

# How should it relate to the nonlinear residual in future steps?
linear_tolerance_multiplier = 1.e-3

# The desired number of active mesh elements
# Make this nonzero to solve to a specified mesh size
#nelem_target = 32798
nelem_target = 40000

# The global FEM error tolerance at each timestep
# Make this nonzero to solve to a specified tolerance
# This will probably break with KellyErrorIndicator
# const Real global_tolerance = 1.e-3;
global_tolerance = 0

# Are we doing uniform refinement steps
refine_uniformly = false

# Type of indicator, refine_uniformly must be set to false for this to work
indicator_type = 'adjoint_residual'

## If using adjoint_residual based indicators, specify the weighting error indicators
adjoint_residual_type = 'patchpatch' 

# Reuse patches (only for patch recovery)
patch_reuse = false

# Reuse preconditioners
reuse_preconditioner = true

# Should we alternate with uniform steps ?
alternate_with_uniform_steps = false

# If alternating, what steps should be adaptive
alternate_step_number = 10

# Do you want to compute and plot component wise errors ? (Only works for adjoint residual)
component_wise_error = true

# Type of error to be looked at
sobolev_order = 1;

# Max number of refinements at each step
refine_fraction = 0.1

# Max number of coarsenings at each step
coarsen_fraction = 0.0

# Coarsen threshold factor for refinement trading
coarsen_threshold = 0

# The maximum number of adaptive steps per timestep
max_adaptivesteps = 5

# Write out every nth timestep to file(s).
write_interval = 1

# Write out error vectors to files
write_gmv_error = true
write_tecplot_error = false

# Output format(s)
output_xda = false
output_xdr = false
output_gmv = true
output_tecplot = false

# Do the simulation or just postprocess ?
run_simulation = true

# Run postprocessing calc?
run_postprocess = true

# Use what finite element space?
fe_family = LAGRANGE
fe_order = 1

# Verify analytic jacobians against numerical ones?
# verify_analytic_jacobians = 1.e-9
verify_analytic_jacobians = 1.e-8

# Detailed debugging options
print_solution_norms = false
print_solutions = false
print_residual_norms = false
print_residuals = false
print_jacobian_norms = false
print_jacobians = false
